// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zhayt/user-storage-service/internal/model"
)

// IUserStorage is an autogenerated mock type for the IUserStorage type
type IUserStorage struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *IUserStorage) CreateUser(ctx context.Context, user model.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *IUserStorage) DeleteUser(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *IUserStorage) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *IUserStorage) GetUserByID(ctx context.Context, userID int) (model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserFIO provides a mock function with given fields: ctx, user
func (_m *IUserStorage) UpdateUserFIO(ctx context.Context, user model.UserUpdateFIO) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUpdateFIO) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUpdateFIO) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserUpdateFIO) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPassword provides a mock function with given fields: ctx, user
func (_m *IUserStorage) UpdateUserPassword(ctx context.Context, user model.UserUpdatePassword) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUpdatePassword) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUpdatePassword) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserUpdatePassword) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserStorage creates a new instance of IUserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserStorage(t mockConstructorTestingTNewIUserStorage) *IUserStorage {
	mock := &IUserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
